{"version":3,"sources":["TodoRow.js","TodoCreator.js","TODOBanner.js","VisibilityControl.js","App.js","serviceWorker.js","index.js"],"names":["TodoRow","render","props","item","action","type","checked","done","onChange","callback","React","Component","TodoCreator","updateNewTextValue","event","setState","newItemText","target","value","createNewTodo","state","className","onClick","TODOBanner","name","tasks","filter","t","length","VisibilityControl","isChecked","e","description","App","task","todoItems","find","localStorage","setItem","JSON","stringify","changeStateData","userName","toggleTodo","todo","map","todoTableRows","doneValue","key","componentDidMount","data","getItem","parse","showCompleted","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.61daaec8.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass TodoRow extends React.Component {\r\n  render = () => (\r\n    <tr>\r\n      <td>{this.props.item.action}</td>\r\n      <td>\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={this.props.item.done}\r\n          onChange={() => this.props.callback(this.props.item)}\r\n        />\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TodoRow;\r\n","import React from \"react\";\r\n\r\nclass TodoCreator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { newItemText: \"\" };\r\n  }\r\n  updateNewTextValue = (event) => {\r\n    this.setState({ newItemText: event.target.value });\r\n  };\r\n  createNewTodo = () => {\r\n    this.props.callback(this.state.newItemText);\r\n    this.setState({ newItemText: \"\" });\r\n  };\r\n  render = () => (\r\n    <div className=\"my-1\">\r\n      <input\r\n        className=\"form-control\"\r\n        value={this.state.newItemText}\r\n        onChange={this.updateNewTextValue}\r\n      />\r\n      <button className=\"btn btn-primary mt-1\" onClick={this.createNewTodo}>\r\n        Add\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoCreator;\r\n","import React from \"react\";\r\n\r\nclass TODOBanner extends React.Component {\r\n  render = () => (\r\n    <h4 className=\"bg-success text-white text-center p-2\">\r\n      {this.props.name}'s To Do List (\r\n      {this.props.tasks.filter((t) => !t.done).length} items to do)\r\n    </h4>\r\n  );\r\n}\r\n\r\nexport default TODOBanner;\r\n","import React from \"react\";\r\n\r\nclass VisibilityControl extends React.Component {\r\n  render = () => (\r\n    <div className=\"form-check\">\r\n      <input\r\n        className=\"form-check-input\"\r\n        type=\"checkbox\"\r\n        checked={this.props.isChecked}\r\n        onChange={(e) => this.props.callback(e.target.checked)}\r\n      />\r\n      <label className=\"form-check-label\">Show {this.props.description}</label>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VisibilityControl;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport TodoRow from \"./TodoRow\";\nimport TodoCreator from \"./TodoCreator\";\nimport TODOBanner from \"./TODOBanner\";\nimport VisibilityControl from \"./VisibilityControl\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userName: \"Berkel\",\n      todoItems: [\n        { action: \"Pray\", done: true },\n        { action: \"Workout\", done: false },\n        { action: \"See a friend\", done: false },\n        { action: \"Study JavaScript\", done: true },\n      ],\n      showCompleted: true,\n    };\n  }\n\n  updateNewTextValue = (event) => {\n    this.setState({ newItemText: event.target.value });\n  };\n\n  createNewTodo = (task) => {\n    if (!this.state.todoItems.find((item) => item.action === task)) {\n      this.setState(\n        {\n          todoItems: [...this.state.todoItems, { action: task, done: false }],\n        },\n        () => localStorage.setItem(\"todos\", JSON.stringify(this.state))\n      );\n    }\n  };\n\n  changeStateData = () => {\n    this.setState({\n      userName: this.state.userName === \"Berkel\" ? \"Ibk\" : \"Berkel\",\n    });\n  };\n\n  toggleTodo = (todo) =>\n    this.setState({\n      todoItems: this.state.todoItems.map((item) =>\n        item.action === todo.action ? { ...item, done: !item.done } : item\n      ),\n    });\n\n  todoTableRows = (doneValue) =>\n    this.state.todoItems\n      .filter((item) => item.done === doneValue)\n      .map((item) => (\n        <TodoRow key={item.action} item={item} callback={this.toggleTodo} />\n      ));\n\n  componentDidMount = () => {\n    let data = localStorage.getItem(\"todos\");\n    this.setState(\n      data != null\n        ? JSON.parse(data)\n        : {\n            userName: \"Berkel\",\n            todoItems: [\n              { action: \"Pray\", done: true },\n              { action: \"Workout\", done: false },\n              { action: \"See a friend\", done: false },\n              { action: \"Study JavaScript\", done: true },\n            ],\n            showCompleted: true,\n          }\n    );\n  };\n\n  render = () => (\n    <div>\n      <TODOBanner name={this.state.userName} tasks={this.state.todoItems} />\n      <div className=\"container-fluid\">\n        <TodoCreator callback={this.createNewTodo} />\n        <table className=\"table table-striped table-bordered\">\n          <thead>\n            <tr>\n              <th>Description</th>\n              <th>Done</th>\n            </tr>\n          </thead>\n          <tbody>{this.todoTableRows(false)}</tbody>\n        </table>\n        <div className=\"bg-secondary text-white text-center p-2\">\n          <VisibilityControl\n            description=\"Completed Tasks\"\n            isChecked={this.state.showCompleted}\n            callback={(checked) => this.setState({ showCompleted: checked })}\n          />\n        </div>\n        {this.state.showCompleted && (\n          <table className=\"table table-striped table-bordered\">\n            <thead>\n              <tr>\n                <th>Description</th>\n                <th>Done</th>\n              </tr>\n            </thead>\n            <tbody>{this.todoTableRows(true)}</tbody>\n          </table>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}